// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: taskmanager.proto

package taskmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerClient interface {
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (TaskManager_PutTaskClient, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (TaskManager_PutTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskManager_ServiceDesc.Streams[0], "/taskmanager.TaskManager/PutTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerPutTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManager_PutTaskClient interface {
	Recv() (*PutTaskResponse, error)
	grpc.ClientStream
}

type taskManagerPutTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagerPutTaskClient) Recv() (*PutTaskResponse, error) {
	m := new(PutTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskManagerServer is the server API for TaskManager service.
// All implementations must embed UnimplementedTaskManagerServer
// for forward compatibility
type TaskManagerServer interface {
	PutTask(*PutTaskRequest, TaskManager_PutTaskServer) error
	mustEmbedUnimplementedTaskManagerServer()
}

// UnimplementedTaskManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (UnimplementedTaskManagerServer) PutTask(*PutTaskRequest, TaskManager_PutTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (UnimplementedTaskManagerServer) mustEmbedUnimplementedTaskManagerServer() {}

// UnsafeTaskManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServer will
// result in compilation errors.
type UnsafeTaskManagerServer interface {
	mustEmbedUnimplementedTaskManagerServer()
}

func RegisterTaskManagerServer(s grpc.ServiceRegistrar, srv TaskManagerServer) {
	s.RegisterService(&TaskManager_ServiceDesc, srv)
}

func _TaskManager_PutTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PutTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServer).PutTask(m, &taskManagerPutTaskServer{stream})
}

type TaskManager_PutTaskServer interface {
	Send(*PutTaskResponse) error
	grpc.ServerStream
}

type taskManagerPutTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagerPutTaskServer) Send(m *PutTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TaskManager_ServiceDesc is the grpc.ServiceDesc for TaskManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskmanager.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutTask",
			Handler:       _TaskManager_PutTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskmanager.proto",
}
